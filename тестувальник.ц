взяти визначення ./розбирач;

зовнішня дія read_file(path: памʼять<char>, path_size: size_t, out: адреса<памʼять<char>>): size_t;
зовнішня дія malloc(size: size_t): невідома_адреса;
зовнішня дія realloc(value: невідома_адреса, size: size_t): невідома_адреса;
зовнішня дія free(value: невідома_адреса);
зовнішня дія putchar(value: char): int;
зовнішня дія println_long(value: long);

дія вивести_ю8(значення_ю8: ю8) {
  змінна ціль п: позитивне = 0;
  поки п < значення_ю8.розмір {
    putchar(char(значення_ю8.дані[п]));
    п += 1;
  }
}

дія надрукувати_ю8(значення_ю8: ю8) {
  вивести_ю8(значення_ю8);
  вивести_ю8(ю8"\n");
}

дія ЯТУТ() {
  надрукувати_ю8(ю8"ЯТУТ!");
}

дія порахувати_розмір_ю8сі(значення: памʼять<п8>): позитивне {
  змінна ціль п: позитивне = 0;
  поки значення[п] != 0 {
    п += 1;
  }
  вернути п;
}

дія система_виділити_сиру_памʼять(система: адреса<мавка::розбирач::Система>, розмір: позитивне): памʼять<п8> {
  вернути malloc(size_t(розмір)) як памʼять<п8>;
}

дія система_перевиділити_сиру_памʼять(система: адреса<мавка::розбирач::Система>, значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8> {
  вернути realloc(значення як невідома_адреса, size_t(новий_розмір)) як памʼять<п8>;
}

дія система_звільнити_сиру_памʼять(система: адреса<мавка::розбирач::Система>, значення: невідома_памʼять) {
  free(значення як невідома_адреса);
}

структура Накопичувач<Т> {
  розмір: позитивне;
  вмісткість: позитивне;
  дані: памʼять<Т>;
}

дія зробити_накопичувач<Т>(система: адреса<мавка::розбирач::Система>): Накопичувач<Т> {
  вернути Накопичувач<Т> {
    розмір = 0,
    вмісткість = 0,
    дані = пусто
  };
}

дія покласти_в_накопичувач<Т>(система: адреса<мавка::розбирач::Система>, накопичувач: адреса<Накопичувач<Т>>, дані: Т) {
  якщо накопичувач.розмір == накопичувач.вмісткість {
    накопичувач.вмісткість += 1;
    накопичувач.дані = мавка::розбирач::перевиділити_памʼять<Т>(система, накопичувач.дані, накопичувач.вмісткість);
  }
  накопичувач.дані[накопичувач.розмір] = дані;
  накопичувач.розмір += 1;
}

дія дописати_в_вихідідний_потік_накопичувача_ю8(система: адреса<мавка::розбирач::Система>, потік: адреса<мавка::розбирач::ВихіднийПотік>, розмір: позитивне, дані: памʼять<п8>): логічне {
  змінна ціль накопичувач_ю8 = потік.дані як адреса<Накопичувач<п8>>;
  змінна ціль п: позитивне = 0;
  поки п < розмір {
    покласти_в_накопичувач<п8>(система, накопичувач_ю8, дані[п]);
    п += 1;
  }
  вернути так;
}

дія дізнатись_розмір_символа_юнікоду(перший_байт: п8): п8 {
  якщо (перший_байт & 128) == 0 {
    вернути 1;
  }
  якщо (перший_байт & 224) == 192 {
    вернути 2;
  }
  якщо (перший_байт & 240) == 224 {
    вернути 3;
  }
  якщо (перший_байт & 248) == 240 {
    вернути 4;
  }
  вернути 0;
}

дія перевірити_чи_ю8_рівні(а: ю8, б: ю8): логічне {
  якщо а.розмір != б.розмір {
    вернути ні;
  }
  змінна ціль п: позитивне = 0;
  поки п < а.розмір {
    якщо а.дані[п] != б.дані[п] {
      вернути ні;
    }
    п += 1;
  }
  вернути так;
}

дія старт(кількість_аргументів: ц32, аргументи: памʼять<памʼять<п8>>): ц32 {
  якщо кількість_аргументів < 2 {
    надрукувати_ю8(ю8"ПОМИЛКА: не вказано шлях до файлу тесту");
    вернути 1;
  }
  ціль значення_ю8 = ю8 { пусто, 0 };
  значення_ю8.розмір = позитивне(read_file(аргументи[1] як памʼять<char>, size_t(порахувати_розмір_ю8сі(аргументи[1])), значення_ю8.дані::адреса як адреса<памʼять<char>>));

  змінна ціль вхід_ю8 = ю8 { пусто, 0 };
  змінна ціль очікуваний_вихід_ю8 = ю8 { пусто, 0 };

  змінна ціль п: позитивне = 0;
  змінна ціль ксть_рисок: позитивне = 0;
  поки п < значення_ю8.розмір {
    якщо ксть_рисок == 3 {
      вхід_ю8.дані = значення_ю8.дані;
      вхід_ю8.розмір = п - 4;
      очікуваний_вихід_ю8.дані = значення_ю8.дані[п + 1]::адреса як памʼять<п8>;
      очікуваний_вихід_ю8.розмір = значення_ю8.розмір - п + 1;
      стрибнути ок;
    }
    ціль рсю = дізнатись_розмір_символа_юнікоду(значення_ю8.дані[п]);
    якщо значення_ю8.дані[п] == 45 {
      якщо рсю == 1 {
        ксть_рисок += 1;
      } інакше {
        ксть_рисок = 0;
      }
    } інакше {
      ксть_рисок = 0;
    }
    п += позитивне(рсю);
  }

  надрукувати_ю8(ю8"ПОМИЛКА: не вдалось знайти вхід і очікуваний вихід");
  вернути 1;

  ок:
  ціль система = мавка::розбирач::Система {
    дані = пусто,
    виділити_сиру_памʼять = система_виділити_сиру_памʼять,
    перевиділити_сиру_памʼять = система_перевиділити_сиру_памʼять,
    звільнити_сиру_памʼять = система_звільнити_сиру_памʼять,
  };
  змінна ціль накопичувач_ю8_виходу = зробити_накопичувач<п8>(система::адреса);
  ціль потік_в_накопичувач_ю8 = мавка::розбирач::ВихіднийПотік {
    дані = накопичувач_ю8_виходу::адреса,
    дописати = дописати_в_вихідідний_потік_накопичувача_ю8
  };

  змінна ціль слова = мавка::розбирач::Слова { 0, пусто };
  змінна ціль помилка_розбору_на_слова = мавка::розбирач::ПомилкаРозборуНаСлова { ... };
  якщо мавка::розбирач::розібрати_ю8_на_слова(система::адреса, вхід_ю8, слова::адреса, помилка_розбору_на_слова::адреса) == ні {
    ціль рядок = мавка::розбирач::отримати_рядок_помилки_розбору_на_слова(система::адреса, помилка_розбору_на_слова);
    ціль стовпець = мавка::розбирач::отримати_стовпець_помилки_розбору_на_слова(система::адреса, помилка_розбору_на_слова);
    ціль ю8_помилки = ю8 { ... };
    якщо мавка::розбирач::отримати_ю8_помилки_розбору_на_слова(система::адреса, помилка_розбору_на_слова, ю8_помилки::адреса) {
      вивести_ю8(ю8"помилка розбору на слова: ");
      надрукувати_ю8(ю8_помилки);
      мавка::розбирач::звільнити_памʼять(система::адреса, ю8_помилки.дані);
    }
    мавка::розбирач::звільнити_помилку_розбору_на_слова(система::адреса, помилка_розбору_на_слова);
    вернути 1;
  }

  змінна ціль гілки = мавка::розбирач::Гілки { 0, пусто };
  змінна ціль помилка_розбору_на_гілки = мавка::розбирач::ПомилкаРозборуНаГілки { ... };
  якщо мавка::розбирач::розібрати_слова_на_гілки(система::адреса, слова, гілки::адреса, помилка_розбору_на_гілки::адреса) == ні {
    ціль рядок = мавка::розбирач::отримати_рядок_помилки_розбору_на_гілки(система::адреса, помилка_розбору_на_гілки);
    ціль стовпець = мавка::розбирач::отримати_стовпець_помилки_розбору_на_гілки(система::адреса, помилка_розбору_на_гілки);
    ціль ю8_помилки = ю8 { ... };
    якщо мавка::розбирач::отримати_ю8_помилки_розбору_на_гілки(система::адреса, помилка_розбору_на_гілки, ю8_помилки::адреса) {
      вивести_ю8(ю8"помилка розбору на гілки: ");
      надрукувати_ю8(ю8_помилки);
      мавка::розбирач::звільнити_памʼять(система::адреса, ю8_помилки.дані);
    }
    мавка::розбирач::звільнити_слова(система::адреса, слова);
    мавка::розбирач::звільнити_помилку_розбору_на_гілки(система::адреса, помилка_розбору_на_гілки);
    вернути 1;
  }

  мавка::розбирач::вивести_гілки(система::адреса, потік_в_накопичувач_ю8::адреса, значення_ю8, слова, гілки);

  якщо перевірити_чи_ю8_рівні(очікуваний_вихід_ю8, ю8 { накопичувач_ю8_виходу.дані, накопичувач_ю8_виходу.розмір }) == ні {
    надрукувати_ю8(ю8"Очікується:");
    надрукувати_ю8(очікуваний_вихід_ю8);
    надрукувати_ю8(ю8"Розібрано:");
    надрукувати_ю8(ю8 { накопичувач_ю8_виходу.дані, накопичувач_ю8_виходу.розмір });
    мавка::розбирач::звільнити_слова(система::адреса, слова);
    мавка::розбирач::звільнити_гілки(система::адреса, гілки);
    free(значення_ю8.дані як невідома_адреса);
    free(накопичувач_ю8_виходу.дані як невідома_адреса);
    вернути 1;
  }

  мавка::розбирач::звільнити_слова(система::адреса, слова);
  мавка::розбирач::звільнити_гілки(система::адреса, гілки);
  free(значення_ю8.дані як невідома_адреса);
  free(накопичувач_ю8_виходу.дані як невідома_адреса);

  вернути 0;
}