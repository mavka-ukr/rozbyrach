взяти визначення ./розбирач2;

секція мавка {
  секція розбирач {
    структура Накопичувач<Т> {
      розмір: позитивне;
      вмісткість: позитивне;
      дані: памʼять<Т>;
    }

    дія зробити_накопичувач<Т>(система: адреса<Система>): Накопичувач<Т> {
      вернути Накопичувач<Т> {
        розмір = 0,
        вмісткість = 0,
        дані = пусто
      };
    }

    дія покласти_в_накопичувач<Т>(система: адреса<Система>, накопичувач: адреса<Накопичувач<Т>>, дані: Т) {
      якщо накопичувач.розмір == накопичувач.вмісткість {
        накопичувач.вмісткість += 1;
        накопичувач.дані = перевиділити_памʼять<Т>(система, накопичувач.дані, накопичувач.вмісткість);
      }
      накопичувач.дані[накопичувач.розмір] = дані;
      накопичувач.розмір += 1;
    }

    дія звільнити_дані_накопичувача<Т>(система: адреса<Система>, накопичувач: Накопичувач<Т>) {
      звільнити_памʼять(система, накопичувач.дані);
    }

    дія перевірити_чи_початок_ідентифікатора(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>): логічне;
    дія перевірити_чи_продовження_ідентифікатора(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>): логічне;
    дія перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, значення: ю8, вихід_позиції_кінця: адреса<позитивне>): логічне;
    дія перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, значення: ю8, вихід_позиції_кінця: адреса<позитивне>, вихід_це_ідентифікатор: адреса<логічне>): логічне;
    дія перевірити_чи_число(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>, вихід_чи_десяткове: адреса<логічне>): логічне;
    дія перевірити_чи_текст_коду_має_ідентифікатор_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>): логічне;

    дія перевірити_чи_початок_ідентифікатора(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>): логічне {
      якщо позиція_початку >= значення_ю8.розмір {
        вернути ні;
      }
      якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"а", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"в", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"є", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ж", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"з", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"и", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"і", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ї", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"й", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"к", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"л", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"м", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"н", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"о", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"п", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"р", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"с", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"т", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"у", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ф", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"х", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ц", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ч", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ш", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"щ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ь", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ю", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"я", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ґ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"А", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"В", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Є", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ж", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"З", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"И", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"І", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ї", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Й", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"К", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Л", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"М", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Н", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"О", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"П", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Р", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"С", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Т", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"У", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ф", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Х", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ц", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ч", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ш", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Щ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ь", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ю", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Я", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ґ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"_", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ʼ", вихід_позиції_кінця) {
      } інакше {
        вернути ні;
      }
      вернути так;
    }

    дія перевірити_чи_продовження_ідентифікатора(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>): логічне {
      якщо позиція_початку >= значення_ю8.розмір {
        вернути ні;
      }
      якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"а", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"в", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"є", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ж", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"з", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"и", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"і", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ї", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"й", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"к", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"л", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"м", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"н", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"о", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"п", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"р", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"с", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"т", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"у", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ф", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"х", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ц", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ч", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ш", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"щ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ь", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ю", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"я", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ґ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"А", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Б", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"В", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Г", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Д", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Е", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Є", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ж", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"З", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"И", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"І", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ї", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Й", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"К", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Л", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"М", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Н", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"О", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"П", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Р", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"С", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Т", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"У", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ф", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Х", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ц", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ч", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ш", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Щ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ь", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ю", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Я", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"Ґ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"_", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"ʼ", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"0", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"1", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"2", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"3", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"4", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"5", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"6", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"7", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"8", вихід_позиції_кінця) {
      } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, позиція_початку, ю8"9", вихід_позиції_кінця) {
      } інакше {
        вернути ні;
      }
      вернути так;
    }

    дія перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, значення: ю8, вихід_позиції_кінця: адреса<позитивне>): логічне {
      якщо позиція_початку >= значення_ю8.розмір {
        вернути ні;
      }
      змінна ціль п: позитивне = 0;
      поки п < значення.розмір {
        якщо (позиція_початку + п) >= значення_ю8.розмір {
          вернути ні;
        }
        якщо значення_ю8.дані[позиція_початку + п] != значення.дані[п] {
          вернути ні;
        }
        вихід_позиції_кінця::вміст = позиція_початку + п;
        п += 1;
      }
      вернути так;
    }

    дія перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, значення: ю8, вихід_позиції_кінця: адреса<позитивне>, вихід_це_ідентифікатор: адреса<логічне>): логічне {
      якщо позиція_початку >= значення_ю8.розмір {
        вернути ні;
      }
      змінна ціль п: позитивне = 0;
      поки п < значення.розмір {
        якщо (позиція_початку + п) >= значення_ю8.розмір {
          вернути ні;
        }
        якщо значення_ю8.дані[позиція_початку + п] != значення.дані[п] {
          вернути ні;
        }
        вихід_позиції_кінця::вміст = позиція_початку + п;
        п += 1;
      }
      якщо (позиція_початку + п) >= значення_ю8.розмір {
        вернути так;
      }
      змінна ціль пкп: позитивне = 0;
      якщо перевірити_чи_продовження_ідентифікатора(система, значення_ю8, позиція_початку + п, пкп::адреса) {
        вихід_це_ідентифікатор::вміст = так;
        вернути ні;
      }
      вернути так;
    }

    дія перевірити_чи_число(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>, вихід_чи_десяткове: адреса<логічне>): логічне {
      змінна ціль має_крапку: логічне = ні;
      змінна ціль має_символ_після_крапки: логічне = ні;
      змінна ціль п: позитивне = позиція_початку;
      якщо п >= значення_ю8.розмір {
        вернути ні;
      }
      якщо значення_ю8.дані[п] == UNICODE_0 {
        п += 1;
        якщо п < значення_ю8.розмір {
          якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"ш", п::адреса) {
            // потім: перевірка 0ш
          } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"Ш", п::адреса) {
            // потім: перевірка 0ш
          } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"д", п::адреса) {
            // потім: перевірка 0д
          } інакше якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"Д", п::адреса) {
            // потім: перевірка 0д
          }
        } інакше {
          стрибнути перевірка_продовження_числа;
        }
      }
      якщо значення_ю8.дані[п] == UNICODE_1 {
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_2 {
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_3 {
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_4 {
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_5 {
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_6 {
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_7 {
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_8 {
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_9 {
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      вернути ні;
      перевірка_продовження_числа:
      якщо п >= значення_ю8.розмір {
        вихід_позиції_кінця::вміст = п - 1;
        вихід_чи_десяткове::вміст = має_крапку;
        вернути так;
      }
      якщо значення_ю8.дані[п] == UNICODE_DOT {
        якщо значення_ю8.розмір > п + 1 {
          якщо значення_ю8.дані[п + 1] == UNICODE_DOT {
            вихід_позиції_кінця::вміст = п - 1;
            вихід_чи_десяткове::вміст = має_крапку;
            вернути так;
          }
        }
        якщо має_крапку {
          вернути ні;
        } інакше {
          має_крапку = так;
          п += 1;
          стрибнути перевірка_продовження_числа;
        }
      }
      якщо значення_ю8.дані[п] == UNICODE_0 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_1 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_2 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_3 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_4 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_5 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_6 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_7 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_8 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо значення_ю8.дані[п] == UNICODE_9 {
        має_символ_після_крапки = так;
        п += 1;
        стрибнути перевірка_продовження_числа;
      }
      якщо має_крапку {
        якщо має_символ_після_крапки {
          вихід_позиції_кінця::вміст = п - 1;
          вихід_чи_десяткове::вміст = так;
          вернути так;
        } інакше {
          вернути ні;
        }
      }
      вихід_позиції_кінця::вміст = п - 1;
      вихід_чи_десяткове::вміст = ні;
      вернути так;
    }

    дія перевірити_чи_текст_коду_має_ідентифікатор_за_позицією_початку(система: адреса<Система>, значення_ю8: ю8, позиція_початку: позитивне, вихід_позиції_кінця: адреса<позитивне>): логічне {
      якщо позиція_початку >= значення_ю8.розмір {
        вернути ні;
      }
      змінна ціль п: позитивне = позиція_початку;
      змінна ціль позиція_кінця: позитивне = 0;
      якщо перевірити_чи_початок_ідентифікатора(система, значення_ю8, п, позиція_кінця::адреса) {
      } інакше {
        вернути ні;
      }
      п = позиція_кінця;
      п += 1;
      змінна ціль є_продовження: логічне = так;
      поки є_продовження {
        якщо перевірити_чи_продовження_ідентифікатора(система, значення_ю8, п, позиція_кінця::адреса) {
          п = позиція_кінця;
          п += 1;
        } інакше {
          є_продовження = ні;
        }
      }
      вихід_позиції_кінця::вміст = п - 1;
      вернути так;
    }

    зовнішня дія розібрати_ю8_на_слова(система: адреса<Система>, значення_ю8: ю8, вихід: адреса<Слова>, вихід_позиції_помилки: адреса<позитивне>): логічне {
      ціль накопичувач_слів = зробити_накопичувач<Слово>(система);
  
      змінна ціль п: позитивне = 0;
      поки п < значення_ю8.розмір {
        якщо значення_ю8.дані[п] == UNICODE_SPACE {
          стрибнути далі;
        }
        змінна ціль позиція_кінця: позитивне = 0;
        змінна ціль це_ідентифікатор: логічне = ні;
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"кінець", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаКінець,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"дія", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаДія,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"структура", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСтруктура,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"перебрати", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаПеребрати,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"цикл", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЦикл,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"як", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЯк,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"якщо", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЯкщо,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"чекати", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЧекати,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"взяти", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВзяти,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"дати", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаДати,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"є", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЄ,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"спец", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСпец,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"вернути", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВернути,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"тривала", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаТривала,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"власна", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВласна,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"і", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаІ,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"інакше", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаІнакше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"або", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаАбо,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"спробувати", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСпробувати,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"зловити", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЗловити,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"впасти", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВпасти,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"поки", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаПоки,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"модуль", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаМодуль,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"рівно", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаРівно,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"більше", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаБільше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"менше", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаМенше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"містить", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаМістить,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"не", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаНе,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"предок", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаПредок,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"це", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЦе,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"перелік", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаПерелік,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"композиція", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаКомпозиція,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"зовнішня", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаЗовнішня,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"внутрішня", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВнутрішня,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"місцева", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаМісцева,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"властивість", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВластивість,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ключове_слово_ю8_за_позицією_початку(система, значення_ю8, п, ю8"видалити", позиція_кінця::адреса, це_ідентифікатор::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаВидалити,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо це_ідентифікатор {
          стрибнути перевірка_ідентифікатора;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"=", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволРівно,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8">", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволБільше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"<", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволМенше,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8".", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволКрапка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"+", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволПлюс,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"-", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволМінус,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"*", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволПомножити,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"/", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволПоділити,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"%", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволЗалишку,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"^", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволПірамідка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"&", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволІ,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"|", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволАбо,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"(", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволВідкритаДужка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8")", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволЗакритаДужка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"[", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволКвадратнаВідкритаДужка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"]", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволКвадратнаЗакритаДужка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"?", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволЗнакПитання,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8":", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволДвокрапка,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"~", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволТильда,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"!", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволЗнакОклику,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8",", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволКома,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"\n", позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаСимволМіжряд,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"'", позиція_кінця::адреса) {
          змінна ціль пп: позитивне = позиція_кінця + 1;
          змінна ціль закінчено: логічне = ні;
          поки пп < значення_ю8.розмір {
            якщо значення_ю8.дані[пп] == 39 {
              закінчено = так;
              стрибнути закінчити_перебір_символів;
            }
            якщо значення_ю8.дані[пп] == 10 {
              стрибнути закінчити_перебір_символів;
            }
            пп += 1;
          }
          закінчити_перебір_символів:
          якщо закінчено {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаСимвол,
              позиція_початку = п,
              позиція_кінця = пп
            });
            п = пп;
            стрибнути далі;
          }
          вернути ні;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"\"\"\"", позиція_кінця::адреса) {
          змінна ціль пп: позитивне = позиція_кінця + 1;
          змінна ціль закінчено: логічне = ні;
          поки пп < значення_ю8.розмір {
            якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, пп, ю8"\"\"\"", пп::адреса) {
              закінчено = так;
              стрибнути закінчити_перебір_багаторядкового_тексту;
            }
            пп += 1;
          }
          закінчити_перебір_багаторядкового_тексту:
          якщо закінчено {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаБагаторядковийТекст,
              позиція_початку = п,
              позиція_кінця = пп
            });
            п = пп;
            стрибнути далі;
          }
          вернути ні;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8"\"", позиція_кінця::адреса) {
          змінна ціль пп: позитивне = позиція_кінця + 1;
          змінна ціль закінчено: логічне = ні;
          поки пп < значення_ю8.розмір {
            якщо значення_ю8.дані[пп] == 34 {
              закінчено = так;
              стрибнути закінчити_перебір_тексту;
            }
            якщо значення_ю8.дані[пп] == 10 {
              стрибнути закінчити_перебір_тексту;
            }
            пп += 1;
          }
          закінчити_перебір_тексту:
          якщо закінчено {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаТекст,
              позиція_початку = п,
              позиція_кінця = пп
            });
            п = пп;
            стрибнути далі;
          }
          вернути ні;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8";;", позиція_кінця::адреса) {
          змінна ціль пп: позитивне = позиція_кінця + 1;
          змінна ціль закінчено: логічне = ні;
          поки пп < значення_ю8.розмір {
            якщо значення_ю8.дані[пп] == 10 {
              закінчено = так;
              стрибнути закінчити_перебір_коментаря;
            }
            пп += 1;
          }
          закінчити_перебір_коментаря:
  //        покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
  //          вид = ВидСловаКоментар,
  //          позиція_початку = п,
  //          позиція_кінця = пп - 1
  //        });
          якщо закінчено {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаСимволМіжряд,
              позиція_початку = пп,
              позиція_кінця = пп
            });
          }
          п = пп;
          стрибнути далі;
        }
        якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, п, ю8";*", позиція_кінця::адреса) {
          змінна ціль пп: позитивне = позиція_кінця + 1;
          змінна ціль закінчено: логічне = ні;
          поки пп < значення_ю8.розмір {
            якщо перевірити_чи_текст_коду_має_ю8_за_позицією_початку(система, значення_ю8, пп, ю8"*;", пп::адреса) {
              закінчено = так;
              стрибнути закінчити_перебір_багаторядкового_коментаря;
            }
            пп += 1;
          }
          закінчити_перебір_багаторядкового_коментаря:
          якщо закінчено {
  //          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
  //            вид = ВидСловаБагаторядковийКоментар,
  //            позиція_початку = п,
  //            позиція_кінця = пп
  //          });
            п = пп;
            стрибнути далі;
          }
          вернути ні;
        }
        змінна ціль чи_десяткове: логічне = ні;
        якщо перевірити_чи_число(система, значення_ю8, п, позиція_кінця::адреса, чи_десяткове::адреса) {
          якщо чи_десяткове {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаДесятковеЧисло,
              позиція_початку = п,
              позиція_кінця = позиція_кінця
            });
          } інакше {
            покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
              вид = ВидСловаЧисло,
              позиція_початку = п,
              позиція_кінця = позиція_кінця
            });
          }
          п = позиція_кінця;
          стрибнути далі;
        }
        перевірка_ідентифікатора:
        якщо перевірити_чи_текст_коду_має_ідентифікатор_за_позицією_початку(система, значення_ю8, п, позиція_кінця::адреса) {
          покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
            вид = ВидСловаІдентифікатор,
            позиція_початку = п,
            позиція_кінця = позиція_кінця
          });
          п = позиція_кінця;
          стрибнути далі;
        }
        вернути ні;
        далі:
        п += 1;
      }
      покласти_в_накопичувач<Слово>(система, накопичувач_слів::адреса, Слово {
        вид = ВидСловаКІНЕЦЬСЛІВ,
        позиція_початку = п - 1,
        позиція_кінця = п - 1
      });
  
      вихід::вміст = Слова {
        накопичувач_слів.розмір,
        накопичувач_слів.дані
      };
      вернути так;
    }

    зовнішня дія розібрати_слова_на_гілки(система: адреса<Система>, слова: Слова, вихід: адреса<Гілки>, вихід_позиції_слова_помилки: адреса<позитивне>): логічне {
      вернути ні;
    }
    
    дія дописати_ю8_у_вихідний_потік(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, значення_ю8: ю8) {
      вихідний_потік.дописати(система, вихідний_потік, значення_ю8.розмір, значення_ю8.дані);
    }

    зовнішня дія вивести_слово(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, слово: Слово) {
      якщо слово.вид == ВидСловаАбо {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Або");
      } інакше якщо слово.вид == ВидСловаБільше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Більше");
      } інакше якщо слово.вид == ВидСловаВзяти {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Взяти");
      } інакше якщо слово.вид == ВидСловаВласна {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Власна");
      } інакше якщо слово.вид == ВидСловаВпасти {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Впасти");
      } інакше якщо слово.вид == ВидСловаВидалити {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Видалити");
      } інакше якщо слово.вид == ВидСловаВнутрішня {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Внутрішня");
      } інакше якщо слово.вид == ВидСловаВластивість {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Властивість");
      } інакше якщо слово.вид == ВидСловаВернути {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Вернути");
      } інакше якщо слово.вид == ВидСловаДія {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Дія");
      } інакше якщо слово.вид == ВидСловаДати {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Дати");
      } інакше якщо слово.вид == ВидСловаЄ {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Є");
      } інакше якщо слово.вид == ВидСловаЗовнішня {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Зовнішня");
      } інакше якщо слово.вид == ВидСловаЗловити {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Зловити");
      } інакше якщо слово.вид == ВидСловаІ {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"І");
      } інакше якщо слово.вид == ВидСловаІнакше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Інакше");
      } інакше якщо слово.вид == ВидСловаКомпозиція {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Композиція");
      } інакше якщо слово.вид == ВидСловаКінець {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Кінець");
      } інакше якщо слово.вид == ВидСловаМодуль {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Модуль");
      } інакше якщо слово.вид == ВидСловаМенше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Менше");
      } інакше якщо слово.вид == ВидСловаМістить {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Містить");
      } інакше якщо слово.вид == ВидСловаМісцева {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Місцева");
      } інакше якщо слово.вид == ВидСловаНе {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Не");
      } інакше якщо слово.вид == ВидСловаПоки {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Поки");
      } інакше якщо слово.вид == ВидСловаПерелік {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Перелік");
      } інакше якщо слово.вид == ВидСловаПредок {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Предок");
      } інакше якщо слово.вид == ВидСловаПеребрати {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Перебрати");
      } інакше якщо слово.вид == ВидСловаРівно {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Рівно");
      } інакше якщо слово.вид == ВидСловаСтруктура {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Структура");
      } інакше якщо слово.вид == ВидСловаСпробувати {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Спробувати");
      } інакше якщо слово.вид == ВидСловаСпец {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Спец");
      } інакше якщо слово.вид == ВидСловаТривала {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Тривала");
      } інакше якщо слово.вид == ВидСловаЦикл {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Цикл");
      } інакше якщо слово.вид == ВидСловаЦе {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Це");
      } інакше якщо слово.вид == ВидСловаЧекати {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Чекати");
      } інакше якщо слово.вид == ВидСловаЯк {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Як");
      } інакше якщо слово.вид == ВидСловаЯкщо {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Якщо");
      } інакше якщо слово.вид == ВидСловаСимволРівно {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволРівно");
      } інакше якщо слово.вид == ВидСловаСимволБільше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволБільше");
      } інакше якщо слово.вид == ВидСловаСимволМенше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволМенше");
      } інакше якщо слово.вид == ВидСловаСимволКрапка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволКрапка");
      } інакше якщо слово.вид == ВидСловаСимволПлюс {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволПлюс");
      } інакше якщо слово.вид == ВидСловаСимволМінус {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволМінус");
      } інакше якщо слово.вид == ВидСловаСимволПомножити {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволПомножити");
      } інакше якщо слово.вид == ВидСловаСимволПоділити {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволПоділити");
      } інакше якщо слово.вид == ВидСловаСимволЗалишку {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволЗалишку");
      } інакше якщо слово.вид == ВидСловаСимволПірамідка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволПірамідка");
      } інакше якщо слово.вид == ВидСловаСимволІ {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволІ");
      } інакше якщо слово.вид == ВидСловаСимволАбо {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволАбо");
      } інакше якщо слово.вид == ВидСловаСимволВідкритаДужка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволВідкритаДужка");
      } інакше якщо слово.вид == ВидСловаСимволЗакритаДужка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволЗакритаДужка");
      } інакше якщо слово.вид == ВидСловаСимволКвадратнаВідкритаДужка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволКвадратнаВідкритаДужка");
      } інакше якщо слово.вид == ВидСловаСимволКвадратнаЗакритаДужка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволКвадратнаЗакритаДужка");
      } інакше якщо слово.вид == ВидСловаСимволЗнакПитання {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволЗнакПитання");
      } інакше якщо слово.вид == ВидСловаСимволДвокрапка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволДвокрапка");
      } інакше якщо слово.вид == ВидСловаСимволТильда {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволТильда");
      } інакше якщо слово.вид == ВидСловаСимволОднолапка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволОднолапка");
      } інакше якщо слово.вид == ВидСловаСимволДволапка {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволДволапка");
      } інакше якщо слово.вид == ВидСловаСимволЗнакОклику {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволЗнакОклику");
      } інакше якщо слово.вид == ВидСловаСимволКома {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволКома");
      } інакше якщо слово.вид == ВидСловаСимволМіжряд {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"СимволМіжряд");
      } інакше якщо слово.вид == ВидСловаЧисло {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Число");
      } інакше якщо слово.вид == ВидСловаДесятковеЧисло {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"ДесятковеЧисло");
      } інакше якщо слово.вид == ВидСловаСимвол {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Символ");
      } інакше якщо слово.вид == ВидСловаТекст {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Текст");
      } інакше якщо слово.вид == ВидСловаБагаторядковийТекст {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"БагаторядковийТекст");
      } інакше якщо слово.вид == ВидСловаКоментар {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Коментар");
      } інакше якщо слово.вид == ВидСловаБагаторядковийКоментар {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"БагаторядковийКоментар");
      } інакше якщо слово.вид == ВидСловаІдентифікатор {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"Ідентифікатор");
      }  інакше якщо слово.вид == ВидСловаКІНЕЦЬСЛІВ {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"КІНЕЦЬСЛІВ");
      } інакше {
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"!!! НЕВІДОМЕ СЛОВО !!!");
      }
    }

    зовнішня дія вивести_слова(система: адреса<Система>, вихідний_потік: адреса<ВихіднийПотік>, слова: Слова) {
      змінна ціль п: позитивне = 0;
      поки п < слова.розмір {
        вивести_слово(система, вихідний_потік, слова.дані[п]);
        дописати_ю8_у_вихідний_потік(система, вихідний_потік, ю8"\n");
        п += 1;
      }
    }
  }
}